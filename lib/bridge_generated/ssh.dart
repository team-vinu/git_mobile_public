// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class ApiSsh {
  Future<KeyPair?> sshKeygen(
      {String? passwd, required Algorithm algorithm, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSshKeygenConstMeta;
}

enum Algorithm {
  Rsa,
  Dsa,
  Ed25519,
}

class KeyPair {
  final Uint8List pubkey;
  final Uint8List privkey;

  KeyPair({
    required this.pubkey,
    required this.privkey,
  });
}

class ApiSshImpl extends FlutterRustBridgeBase<ApiSshWire> implements ApiSsh {
  factory ApiSshImpl(ffi.DynamicLibrary dylib) =>
      ApiSshImpl.raw(ApiSshWire(dylib));

  ApiSshImpl.raw(ApiSshWire inner) : super(inner);

  Future<KeyPair?> sshKeygen(
          {String? passwd, required Algorithm algorithm, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_ssh_keygen(port_,
            _api2wire_opt_String(passwd), _api2wire_algorithm(algorithm)),
        parseSuccessData: _wire2api_opt_box_autoadd_key_pair,
        constMeta: kSshKeygenConstMeta,
        argValues: [passwd, algorithm],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSshKeygenConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ssh_keygen",
        argNames: ["passwd", "algorithm"],
      );

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  int _api2wire_algorithm(Algorithm raw) {
    return raw.index;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : _api2wire_String(raw);
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_2(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire

}

// Section: wire2api
KeyPair _wire2api_box_autoadd_key_pair(dynamic raw) {
  return _wire2api_key_pair(raw);
}

KeyPair _wire2api_key_pair(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return KeyPair(
    pubkey: _wire2api_uint_8_list(arr[0]),
    privkey: _wire2api_uint_8_list(arr[1]),
  );
}

KeyPair? _wire2api_opt_box_autoadd_key_pair(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_key_pair(raw);
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class ApiSshWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ApiSshWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ApiSshWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void free_WireSyncReturnStruct(
    int val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct =
      _free_WireSyncReturnStructPtr.asFunction<void Function(int)>();
}
